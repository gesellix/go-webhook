// generated by jsonenums -type=MessageType; DO NOT EDIT

package webhook

import (
	"encoding/json"
	"fmt"
)

var (
	_MessageTypeNameToValue = map[string]MessageType{
		"DockerHub": DockerHub,
		"Drone":     Drone,
	}

	_MessageTypeValueToName = map[MessageType]string{
		DockerHub: "DockerHub",
		Drone:     "Drone",
	}
)

func init() {
	var v MessageType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MessageTypeNameToValue = map[string]MessageType{
			interface{}(DockerHub).(fmt.Stringer).String(): DockerHub,
			interface{}(Drone).(fmt.Stringer).String():     Drone,
		}
	}
}

// MarshalJSON is generated so MessageType satisfies json.Marshaler.
func (r MessageType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MessageTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MessageType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MessageType satisfies json.Unmarshaler.
func (r *MessageType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessageType should be a string, got %s", data)
	}
	v, ok := _MessageTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MessageType %q", s)
	}
	*r = v
	return nil
}
